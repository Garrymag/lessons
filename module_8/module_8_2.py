def personal_sum(numbers):
    """
    Вычисляет сумму числовых элементов в коллекции и подсчитывает количество некорректных данных.

    :param numbers: Коллекция элементов, которые нужно обработать.
    :return: Кортеж из двух значений:
             - result (int или float): Сумма всех числовых элементов.
             - incorrect_data (int): Количество элементов с некорректным типом.
    """
    result = 0  # Инициализация суммы чисел
    incorrect_data = 0  # Инициализация счетчика некорректных данных

    for item in numbers:
        try:
            result += item  # Попытка добавить элемент к сумме
        except TypeError:
            # Если элемент не является числом, обрабатываем исключение
            print(f'Некорректный тип данных для подсчёта суммы - {item}')
            incorrect_data += 1  # Увеличиваем счетчик некорректных данных

    return result, incorrect_data  # Возвращаем сумму и количество некорректных данных


def calculate_average(numbers):
    """
    Вычисляет среднее арифметическое числовых элементов в коллекции.

    :param numbers: Коллекция элементов, из которых нужно вычислить среднее.
    :return: Среднее арифметическое всех числовых элементов.
             Возвращает 0, если нет корректных чисел.
             Возвращает None, если передан некорректный тип данных.
    """
    try:
        # Вызываем функцию personal_sum для получения суммы и количества некорректных данных
        total_sum, incorrect = personal_sum(numbers)

        # Вычисляем количество корректных чисел
        valid_count = len(numbers) - incorrect

        # Проверяем, что количество корректных чисел больше нуля, чтобы избежать деления на ноль
        average = total_sum / valid_count
        return average  # Возвращаем среднее арифметическое

    except ZeroDivisionError:
        # Если valid_count равен нулю, возвращаем 0
        return 0
    except TypeError:
        # Если переданный аргумент не является коллекцией, обрабатываем исключение
        print('В numbers записан некорректный тип данных')
        return None


# Примеры вызова функций с разными типами данных
print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка перебирается, но каждый символ - строковый тип

print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3

print(f'Результат 3: {calculate_average(567)}')  # Передана не коллекция

print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Всё должно работать
