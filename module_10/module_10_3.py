import threading
import random
import time


class Bank:
    def __init__(self):
        """
        Инициализация объекта Bank.
        balance - начальный баланс банка, установлен в 0.
        lock - объект Lock для синхронизации доступа к балансу.
        """
        self.balance = 0
        self.lock = threading.Lock()

    def deposit(self):
        """
        Метод для пополнения баланса банка.
        Выполняет 100 транзакций пополнения.
        Каждое пополнение увеличивает баланс на случайное число от 50 до 500.
        Если после пополнения баланс >= 500 и замок заблокирован, разблокирует его.
        После каждой транзакции выводит информацию о пополнении и текущем балансе.
        """
        for _ in range(100):
            # Генерация случайного значения пополнения
            amount = random.randint(50, 500)

            # Блокировка доступа к балансу для безопасного изменения
            with self.lock:
                self.balance += amount
                print(f'Пополнение: {amount}. Баланс: {self.balance}')

                # Если баланс >= 500 и замок заблокирован, разблокировать его
                if self.balance >= 500 and self.lock.locked():
                    self.lock.release()
                    print('Замок разблокирован после пополнения.')

            # Имитация скорости выполнения пополнения
            time.sleep(0.001)

    def take(self):
        """
        Метод для снятия средств с баланса банка.
        Выполняет 100 транзакций снятия.
        Каждое снятие пытается уменьшить баланс на случайное число от 50 до 500.
        Если средств достаточно, выполняет снятие и выводит информацию.
        Если средств недостаточно, выводит отказ и блокирует поток.
        """
        for _ in range(100):
            # Генерация случайного значения запроса на снятие
            amount = random.randint(50, 500)
            print(f'Запрос на {amount}')

            # Попытка заблокировать доступ к балансу
            acquired = self.lock.acquire(timeout=0)
            if acquired:
                try:
                    if amount <= self.balance:
                        self.balance -= amount
                        print(f'Снятие: {amount}. Баланс: {self.balance}')
                    else:
                        print('Запрос отклонён, недостаточно средств')
                        # Блокировка потока до разблокировки замком
                        print('Поток заблокирован из-за недостатка средств.')
                        self.lock.acquire()
                finally:
                    self.lock.release()
            else:
                # Если замок уже заблокирован, значит, предыдущий запрос на блокировку встал
                print('Поток уже заблокирован. Ожидание разблокировки.')
                self.lock.acquire()
                self.lock.release()

            # Имитация скорости выполнения снятия
            time.sleep(0.001)


# Создание объекта класса Bank
bk = Bank()

# Создание потоков для методов deposit и take
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

# Запуск потоков
th1.start()
th2.start()

# Ожидание завершения работы потоков
th1.join()
th2.join()

# Вывод итогового баланса
print(f'Итоговый баланс: {bk.balance}')