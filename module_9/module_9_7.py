# Декоратор для проверки простоты числа
def is_prime(func):
    # Внутренняя функция-обертка, которая будет выполнять дополнительную логику
    def wrapper(*args):
        # Вызываем оригинальную функцию с переданными аргументами
        # и сохраняем ее результат
        result = func(*args)

        # Если число меньше 2, оно не является простым
        if result < 2:
            print("< 2 Не простое")
            return result

        # Проверка на простоту числа:
        # Делим число на все числа от 2 до квадратного корня из числа
        # Если находим делитель, число составное
        for i in range(2, int(result ** 0.5) + 1):
            if result % i == 0:
                print("Составное")
                return result

        # Если циклом не найдены делители, число простое
        print("Простое")
        return result

    # Возвращаем обертку вместо оригинальной функции
    return wrapper


# Функция суммирования трех чисел, декорированная is_prime
@is_prime
def sum_three(a, b, c):
    # Складываем три входных числа
    return a + b + c


# Демонстрация работы функции

# Пример 1: Простое число (2+3+6 = 11)
result = sum_three(2, 3, 6)
print(result)

# Пример 2: Составное число (1+3+8 = 11)
result = sum_three(1, 3, 8)
print(result)

# Пример 3: Число меньше 2 (1+0+0 = 1)
result = sum_three(1, 0, 0)
print(result)